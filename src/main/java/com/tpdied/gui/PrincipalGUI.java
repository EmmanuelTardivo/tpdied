/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.tpdied.gui;

import com.formdev.flatlaf.FlatIntelliJLaf;
import com.tpdied.controllers.OrdenProvisionController;
import com.tpdied.controllers.ProductoController;
import com.tpdied.controllers.RutaController;
import com.tpdied.controllers.SucursalController;
import com.tpdied.dto.ProductoDTO;
import com.tpdied.dto.RutaDTO;
import com.tpdied.dto.SucursalDTO;
import com.tpdied.forms.ProductoForm;
import com.tpdied.forms.SucursalForm;
import com.tpdied.forms.RutaForm;
import com.tpdied.managers.OrdenProvisionManager;
import com.tpdied.util.EntityManagerUtil;

import java.time.Duration;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author fgmarcolini
 */
public class PrincipalGUI extends javax.swing.JFrame {

    /**
     * Creates new form PrincipalGUI
     */
    public PrincipalGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jSucursalTab = new javax.swing.JPanel();
        lblIDSucursal = new javax.swing.JLabel();
        tfNombreSucursal = new javax.swing.JTextField();
        lblNombreSucursal = new javax.swing.JLabel();
        lblHoraAperturaSucursal = new javax.swing.JLabel();
        lblHoraCierreSucursal = new javax.swing.JLabel();
        lblEstadoSucursal = new javax.swing.JLabel();
        cbEstadoSucursal = new javax.swing.JCheckBox();
        btCrearSucursal = new javax.swing.JButton();
        btBuscarSucursal = new javax.swing.JButton();
        btModificarSucursal = new javax.swing.JButton();
        btEliminarSucursal = new javax.swing.JButton();
        btLimpiarSucursal = new javax.swing.JButton();
        ftfHoraApertura = new javax.swing.JFormattedTextField();
        ftfHoraCierre = new javax.swing.JFormattedTextField();
        spSucursal = new javax.swing.JScrollPane();
        tlSucursal = new javax.swing.JTable();
        ftfIDSucursal = new javax.swing.JFormattedTextField();
        jRutaTab = new javax.swing.JPanel();
        lblIDRuta = new javax.swing.JLabel();
        lblSucursalOrigen = new javax.swing.JLabel();
        lblSucursalDestino = new javax.swing.JLabel();
        lblTiempoTransito = new javax.swing.JLabel();
        lblCapacidadMaxima = new javax.swing.JLabel();
        btCrearRuta = new javax.swing.JButton();
        btBuscarRuta = new javax.swing.JButton();
        btModificarRuta = new javax.swing.JButton();
        btEliminarRuta = new javax.swing.JButton();
        spRuta = new javax.swing.JScrollPane();
        tlRuta = new javax.swing.JTable();
        btLimpiarRuta = new javax.swing.JButton();
        cbSucursalOrigen = new JComboBox<SucursalDTO>();
        cbSucursalDestino = new JComboBox<SucursalDTO>();
        lblEstadoRuta = new javax.swing.JLabel();
        cbEstadoRuta = new javax.swing.JCheckBox();
        ftfCapMaxima = new javax.swing.JFormattedTextField();
        ftfTiempoTransito = new javax.swing.JFormattedTextField();
        ftfIDRuta = new javax.swing.JFormattedTextField();
        jProductoTab = new javax.swing.JPanel();
        lblIDProducto = new javax.swing.JLabel();
        tfNombreProducto = new javax.swing.JTextField();
        lblNombreProducto = new javax.swing.JLabel();
        lblDescripcionProducto = new javax.swing.JLabel();
        lblPrecioUnitario = new javax.swing.JLabel();
        lblPesoKG = new javax.swing.JLabel();
        btCrearProducto = new javax.swing.JButton();
        btBuscarProducto = new javax.swing.JButton();
        btModificarProducto = new javax.swing.JButton();
        btEliminarProducto = new javax.swing.JButton();
        spProducto = new javax.swing.JScrollPane();
        tlProducto = new javax.swing.JTable();
        btLimpiarProducto = new javax.swing.JButton();
        tfDescripcionProducto = new javax.swing.JTextField();
        ftfPrecioUnitario = new javax.swing.JFormattedTextField();
        ftfPesoKG = new javax.swing.JFormattedTextField();
        ftfIDProducto = new javax.swing.JFormattedTextField();
        jStockTab = new javax.swing.JPanel();
        lblSucursalStock = new javax.swing.JLabel();
        lblProductoStock = new javax.swing.JLabel();
        lblCantidadStock = new javax.swing.JLabel();
        btCrearStock = new javax.swing.JButton();
        btModificarStock = new javax.swing.JButton();
        btEliminarStock = new javax.swing.JButton();
        spStock = new javax.swing.JScrollPane();
        tlStockSucursal = new javax.swing.JTable();
        btLimpiarStock = new javax.swing.JButton();
        cbSucursalStock = new JComboBox<SucursalDTO>();
        cbProductoStock = new JComboBox<ProductoDTO>();
        ftfCantidadStock = new javax.swing.JFormattedTextField();
        jProvisionTab = new javax.swing.JPanel();
        lblSucursalProvision = new javax.swing.JLabel();
        lblProductoProvision = new javax.swing.JLabel();
        lblCantidadProvision = new javax.swing.JLabel();
        btAgregarProductoProvision = new javax.swing.JButton();
        btEliminarProductoProvision = new javax.swing.JButton();
        spProvision = new javax.swing.JScrollPane(tlProvision);
        tlProvision = new javax.swing.JTable();
        btCrearProvision = new javax.swing.JButton();
        cbSucursalProvision = new JComboBox<SucursalDTO>();
        cbProductoProvision = new JComboBox<ProductoDTO>();
        lblFechaProvision = new javax.swing.JLabel();
        btLimpiarProvision = new javax.swing.JButton();
        ftfCantidadProvision = new javax.swing.JFormattedTextField();
        lblFechaOrdenProvision = new javax.swing.JLabel();
        jCaminos = new javax.swing.JPanel();
        spCaminos = new javax.swing.JScrollPane(tlCaminos);
        tlCaminos = new javax.swing.JTable();
        btVerCaminos = new javax.swing.JButton();
        jFlujoMax = new javax.swing.JPanel();
        jPageRank = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(704, 430));
        setMinimumSize(new java.awt.Dimension(704, 430));
        setResizable(false);
        setSize(new java.awt.Dimension(704, 430));

        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        jTabbedPane1.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        jTabbedPane1.setMaximumSize(new java.awt.Dimension(704, 430));
        jTabbedPane1.setMinimumSize(new java.awt.Dimension(704, 430));
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(704, 430));

        jSucursalTab.setFont(new java.awt.Font("Noto Sans", 0, 12)); // NOI18N
        jSucursalTab.setMaximumSize(new java.awt.Dimension(704, 430));
        jSucursalTab.setMinimumSize(new java.awt.Dimension(704, 430));
        jSucursalTab.setName(""); // NOI18N
        jSucursalTab.setPreferredSize(new java.awt.Dimension(704, 430));

        lblIDSucursal.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        lblIDSucursal.setText("ID:");

        tfNombreSucursal.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        tfNombreSucursal.setMaximumSize(new java.awt.Dimension(64, 23));

        lblNombreSucursal.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        lblNombreSucursal.setText("Nombre:");

        lblHoraAperturaSucursal.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        lblHoraAperturaSucursal.setText("Hora Apertura:");

        lblHoraCierreSucursal.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        lblHoraCierreSucursal.setText("Hora Cierre:");

        lblEstadoSucursal.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        lblEstadoSucursal.setText("Operativo:");

        btCrearSucursal.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        btCrearSucursal.setText("Crear");
        btCrearSucursal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCrearSucursalActionPerformed(evt);
            }
        });

        btBuscarSucursal.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        btBuscarSucursal.setText("Buscar");
        btBuscarSucursal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btBuscarSucursalActionPerformed(evt);
            }
        });

        btModificarSucursal.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        btModificarSucursal.setText("Modificar");
        btModificarSucursal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btModificarSucursalActionPerformed(evt);
            }
        });

        btEliminarSucursal.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        btEliminarSucursal.setText("Eliminar");
        btEliminarSucursal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEliminarSucursalActionPerformed(evt);
            }
        });

        btLimpiarSucursal.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        btLimpiarSucursal.setText("Limpiar");
        btLimpiarSucursal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLimpiarSucursalActionPerformed(evt);
            }
        });

        ftfHoraApertura.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getTimeInstance(java.text.DateFormat.SHORT))));
        ftfHoraApertura.setText("00:00");
        ftfHoraApertura.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N

        ftfHoraCierre.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getTimeInstance(java.text.DateFormat.SHORT))));
        ftfHoraCierre.setText("00:00");
        ftfHoraCierre.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N

        spSucursal.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        spSucursal.setFont(new java.awt.Font("Noto Sans", 0, 12)); // NOI18N

        btLimpiarSucursalActionPerformed(null);
        spSucursal.setViewportView(tlSucursal);

        ftfIDSucursal.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        ftfIDSucursal.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N

        javax.swing.GroupLayout jSucursalTabLayout = new javax.swing.GroupLayout(jSucursalTab);
        jSucursalTab.setLayout(jSucursalTabLayout);
        jSucursalTabLayout.setHorizontalGroup(
            jSucursalTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jSucursalTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jSucursalTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jSucursalTabLayout.createSequentialGroup()
                        .addGroup(jSucursalTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btCrearSucursal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jSucursalTabLayout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addGroup(jSucursalTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btLimpiarSucursal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btModificarSucursal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(18, 18, 18)
                        .addGroup(jSucursalTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btBuscarSucursal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btEliminarSucursal, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jSucursalTabLayout.createSequentialGroup()
                        .addGroup(jSucursalTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblNombreSucursal)
                            .addComponent(lblIDSucursal)
                            .addComponent(lblHoraAperturaSucursal)
                            .addComponent(lblHoraCierreSucursal)
                            .addComponent(lblEstadoSucursal))
                        .addGap(18, 18, 18)
                        .addGroup(jSucursalTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(cbEstadoSucursal, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfNombreSucursal, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                            .addComponent(ftfHoraApertura, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ftfHoraCierre, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ftfIDSucursal, javax.swing.GroupLayout.Alignment.LEADING))))
                .addGap(18, 18, 18)
                .addComponent(spSucursal, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(151, Short.MAX_VALUE))
        );
        jSucursalTabLayout.setVerticalGroup(
            jSucursalTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jSucursalTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jSucursalTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jSucursalTabLayout.createSequentialGroup()
                        .addGroup(jSucursalTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblIDSucursal)
                            .addComponent(ftfIDSucursal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jSucursalTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblNombreSucursal)
                            .addComponent(tfNombreSucursal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jSucursalTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblHoraAperturaSucursal)
                            .addComponent(ftfHoraApertura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jSucursalTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblHoraCierreSucursal)
                            .addComponent(ftfHoraCierre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jSucursalTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbEstadoSucursal)
                            .addComponent(lblEstadoSucursal))
                        .addGap(42, 42, 42)
                        .addGroup(jSucursalTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btCrearSucursal)
                            .addComponent(btBuscarSucursal))
                        .addGap(18, 18, 18)
                        .addGroup(jSucursalTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btModificarSucursal)
                            .addComponent(btEliminarSucursal))
                        .addGap(18, 18, 18)
                        .addComponent(btLimpiarSucursal))
                    .addComponent(spSucursal, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(59, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Sucursal", jSucursalTab);

        jRutaTab.setFont(new java.awt.Font("Noto Sans", 0, 12)); // NOI18N
        jRutaTab.setMaximumSize(new java.awt.Dimension(704, 430));
        jRutaTab.setMinimumSize(new java.awt.Dimension(704, 430));
        jRutaTab.setPreferredSize(new java.awt.Dimension(704, 430));

        lblIDRuta.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        lblIDRuta.setText("ID:");

        lblSucursalOrigen.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        lblSucursalOrigen.setText("Suc. Origen:");

        lblSucursalDestino.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        lblSucursalDestino.setText("Suc. Destino:");

        lblTiempoTransito.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        lblTiempoTransito.setText("Tiempo Transito:");

        lblCapacidadMaxima.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        lblCapacidadMaxima.setText("Cap. Máxima:");

        btCrearRuta.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        btCrearRuta.setText("Crear");
        btCrearRuta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCrearRutaActionPerformed(evt);
            }
        });

        btBuscarRuta.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        btBuscarRuta.setText("Buscar");
        btBuscarRuta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btBuscarRutaActionPerformed(evt);
            }
        });

        btModificarRuta.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        btModificarRuta.setText("Modificar");
        btModificarRuta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btModificarRutaActionPerformed(evt);
            }
        });

        btEliminarRuta.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        btEliminarRuta.setText("Eliminar");
        btEliminarRuta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEliminarRutaActionPerformed(evt);
            }
        });

        spRuta.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        spRuta.setPreferredSize(new java.awt.Dimension(600, 400));
        sucursales.forEach(s -> {
            cbSucursalOrigen.addItem(s);
            cbSucursalDestino.addItem(s);
        });
        cbSucursalOrigen.setSelectedIndex(-1);
        cbSucursalDestino.setSelectedIndex(-1);
        getTableRuta(rutas);
        spRuta.setViewportView(tlRuta);


        btLimpiarRuta.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        btLimpiarRuta.setText("Limpiar");
        btLimpiarRuta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLimpiarRutaActionPerformed(evt);
            }
        });

        cbSucursalOrigen.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        cbSucursalOrigen.setToolTipText("");

        cbSucursalDestino.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        cbSucursalDestino.setToolTipText("");


        lblEstadoRuta.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        lblEstadoRuta.setText("Operativa:");

        ftfCapMaxima.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        ftfCapMaxima.setText("0");
        ftfCapMaxima.setToolTipText("En Kilogramos");
        ftfCapMaxima.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N

        ftfTiempoTransito.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getTimeInstance(java.text.DateFormat.SHORT))));
        ftfTiempoTransito.setText("00:00");
        ftfTiempoTransito.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N

        ftfIDRuta.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        ftfIDRuta.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N

        javax.swing.GroupLayout jRutaTabLayout = new javax.swing.GroupLayout(jRutaTab);
        jRutaTab.setLayout(jRutaTabLayout);
        jRutaTabLayout.setHorizontalGroup(
            jRutaTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jRutaTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jRutaTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jRutaTabLayout.createSequentialGroup()
                        .addGroup(jRutaTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblSucursalOrigen)
                            .addComponent(lblIDRuta)
                            .addComponent(lblSucursalDestino)
                            .addComponent(lblTiempoTransito))
                        .addGroup(jRutaTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jRutaTabLayout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addGroup(jRutaTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cbEstadoRuta)
                                    .addComponent(cbSucursalOrigen, 0, 97, Short.MAX_VALUE)
                                    .addComponent(ftfIDRuta)))
                            .addGroup(jRutaTabLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jRutaTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ftfTiempoTransito)
                                    .addComponent(cbSucursalDestino, 0, 96, Short.MAX_VALUE)))))
                    .addGroup(jRutaTabLayout.createSequentialGroup()
                        .addGroup(jRutaTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblEstadoRuta)
                            .addGroup(jRutaTabLayout.createSequentialGroup()
                                .addGroup(jRutaTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btCrearRuta, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jRutaTabLayout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addGroup(jRutaTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(btLimpiarRuta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(btModificarRuta))))
                                .addGap(18, 18, 18)
                                .addGroup(jRutaTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btBuscarRuta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btEliminarRuta, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jRutaTabLayout.createSequentialGroup()
                        .addComponent(lblCapacidadMaxima)
                        .addGap(37, 37, 37)
                        .addComponent(ftfCapMaxima)))
                .addGap(18, 18, 18)
                .addComponent(spRuta, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(141, 141, 141))
        );
        jRutaTabLayout.setVerticalGroup(
            jRutaTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jRutaTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jRutaTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jRutaTabLayout.createSequentialGroup()
                        .addGroup(jRutaTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblIDRuta)
                            .addComponent(ftfIDRuta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jRutaTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSucursalOrigen)
                            .addComponent(cbSucursalOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jRutaTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSucursalDestino)
                            .addComponent(cbSucursalDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jRutaTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTiempoTransito)
                            .addComponent(ftfTiempoTransito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jRutaTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCapacidadMaxima)
                            .addComponent(ftfCapMaxima, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(jRutaTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblEstadoRuta)
                            .addComponent(cbEstadoRuta))
                        .addGap(40, 40, 40)
                        .addGroup(jRutaTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btCrearRuta)
                            .addComponent(btBuscarRuta))
                        .addGap(18, 18, 18)
                        .addGroup(jRutaTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btModificarRuta)
                            .addComponent(btEliminarRuta))
                        .addGap(18, 18, 18)
                        .addComponent(btLimpiarRuta))
                    .addComponent(spRuta, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(59, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Ruta", jRutaTab);

        jProductoTab.setFont(new java.awt.Font("Noto Sans", 0, 12)); // NOI18N
        jProductoTab.setMaximumSize(new java.awt.Dimension(704, 430));
        jProductoTab.setMinimumSize(new java.awt.Dimension(704, 430));
        jProductoTab.setPreferredSize(new java.awt.Dimension(704, 430));

        lblIDProducto.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        lblIDProducto.setText("ID:");

        tfNombreProducto.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        tfNombreProducto.setMaximumSize(new java.awt.Dimension(64, 23));

        lblNombreProducto.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        lblNombreProducto.setText("Nombre:");

        lblDescripcionProducto.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        lblDescripcionProducto.setText("Descripción:");

        lblPrecioUnitario.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        lblPrecioUnitario.setText("Precio Unitario:");

        lblPesoKG.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        lblPesoKG.setText("Peso en KG:");

        btCrearProducto.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        btCrearProducto.setText("Crear");
        btCrearProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCrearProductoActionPerformed(evt);
            }
        });

        btBuscarProducto.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        btBuscarProducto.setText("Buscar");
        btBuscarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btBuscarProductoActionPerformed(evt);
            }
        });

        btModificarProducto.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        btModificarProducto.setText("Modificar");
        btModificarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btModificarProductoActionPerformed(evt);
            }
        });

        btEliminarProducto.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        btEliminarProducto.setText("Eliminar");
        btEliminarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEliminarProductoActionPerformed(evt);
            }
        });

        spProducto.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        spProducto.setPreferredSize(new java.awt.Dimension(600, 400));
        getTableProducto(productos);
        spProducto.setViewportView(tlProducto);

        btLimpiarProducto.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        btLimpiarProducto.setText("Limpiar");
        btLimpiarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLimpiarProductoActionPerformed(evt);
            }
        });

        tfDescripcionProducto.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        tfDescripcionProducto.setMaximumSize(new java.awt.Dimension(64, 23));

        ftfPrecioUnitario.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        ftfPrecioUnitario.setText("0");
        ftfPrecioUnitario.setToolTipText("En Dolares");
        ftfPrecioUnitario.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N

        ftfPesoKG.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        ftfPesoKG.setText("0");
        ftfPesoKG.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N

        ftfIDProducto.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N

        javax.swing.GroupLayout jProductoTabLayout = new javax.swing.GroupLayout(jProductoTab);
        jProductoTab.setLayout(jProductoTabLayout);
        jProductoTabLayout.setHorizontalGroup(
            jProductoTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jProductoTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jProductoTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jProductoTabLayout.createSequentialGroup()
                        .addGroup(jProductoTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblNombreProducto)
                            .addComponent(lblIDProducto)
                            .addComponent(lblDescripcionProducto)
                            .addComponent(lblPrecioUnitario)
                            .addComponent(lblPesoKG))
                        .addGroup(jProductoTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jProductoTabLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jProductoTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tfDescripcionProducto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(ftfPrecioUnitario)
                                    .addComponent(ftfPesoKG, javax.swing.GroupLayout.Alignment.TRAILING)))
                            .addGroup(jProductoTabLayout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addGroup(jProductoTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(tfNombreProducto, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                                    .addComponent(ftfIDProducto)))))
                    .addGroup(jProductoTabLayout.createSequentialGroup()
                        .addGroup(jProductoTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btCrearProducto, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jProductoTabLayout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addGroup(jProductoTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btLimpiarProducto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btModificarProducto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(18, 18, 18)
                        .addGroup(jProductoTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btBuscarProducto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btEliminarProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 15, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addComponent(spProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(149, 149, 149))
        );
        jProductoTabLayout.setVerticalGroup(
            jProductoTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jProductoTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jProductoTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jProductoTabLayout.createSequentialGroup()
                        .addGroup(jProductoTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblIDProducto)
                            .addComponent(ftfIDProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jProductoTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblNombreProducto)
                            .addComponent(tfNombreProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jProductoTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblDescripcionProducto)
                            .addComponent(tfDescripcionProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jProductoTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPrecioUnitario)
                            .addComponent(ftfPrecioUnitario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(16, 16, 16)
                        .addGroup(jProductoTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPesoKG)
                            .addComponent(ftfPesoKG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(42, 42, 42)
                        .addGroup(jProductoTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btCrearProducto)
                            .addComponent(btBuscarProducto))
                        .addGap(18, 18, 18)
                        .addGroup(jProductoTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btModificarProducto)
                            .addComponent(btEliminarProducto))
                        .addGap(18, 18, 18)
                        .addComponent(btLimpiarProducto))
                    .addComponent(spProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(54, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Producto", jProductoTab);

        jStockTab.setFont(new java.awt.Font("Noto Sans", 0, 12)); // NOI18N
        jStockTab.setMaximumSize(new java.awt.Dimension(704, 430));
        jStockTab.setMinimumSize(new java.awt.Dimension(704, 430));
        jStockTab.setName(""); // NOI18N
        jStockTab.setPreferredSize(new java.awt.Dimension(704, 430));

        lblSucursalStock.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        lblSucursalStock.setText("Sucursal:");

        lblProductoStock.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        lblProductoStock.setText("Producto:");

        lblCantidadStock.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        lblCantidadStock.setText("Cantidad:");

        btCrearStock.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        btCrearStock.setText("Crear");
        btCrearStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCrearStockActionPerformed(evt);
            }
        });

        btModificarStock.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        btModificarStock.setText("Modificar");
        btModificarStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btModificarStockActionPerformed(evt);
            }
        });

        btEliminarStock.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        btEliminarStock.setText("Eliminar");
        btEliminarStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEliminarStockActionPerformed(evt);
            }
        });

        spStock.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        spStock.setPreferredSize(new java.awt.Dimension(600, 400));

        getTableStockSucursal(null);
        spStock.setViewportView(tlStockSucursal);

        btLimpiarStock.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        btLimpiarStock.setText("Limpiar");
        btLimpiarStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLimpiarStockActionPerformed(evt);
            }
        });

        cbSucursalStock.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        cbSucursalStock.setToolTipText("");
        sucursales.forEach(s -> {
            cbSucursalStock.addItem(s);
        });
        cbSucursalStock.setSelectedIndex(-1);

        cbSucursalStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSucursalStockActionPerformed(evt);
            }
        });

        cbProductoStock.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        cbProductoStock.setToolTipText("");
        productos.forEach(s -> {
            cbProductoStock.addItem(s);
        });
        cbProductoStock.setSelectedIndex(-1);
        cbProductoStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbProductoStockActionPerformed(evt);
            }
        });

        ftfCantidadStock.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        ftfCantidadStock.setText("0");
        ftfCantidadStock.setToolTipText("");
        ftfCantidadStock.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N

        javax.swing.GroupLayout jStockTabLayout = new javax.swing.GroupLayout(jStockTab);
        jStockTab.setLayout(jStockTabLayout);
        jStockTabLayout.setHorizontalGroup(
            jStockTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jStockTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jStockTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jStockTabLayout.createSequentialGroup()
                        .addGroup(jStockTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblSucursalStock)
                            .addComponent(lblProductoStock)
                            .addComponent(lblCantidadStock))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jStockTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cbSucursalStock, 0, 107, Short.MAX_VALUE)
                            .addComponent(cbProductoStock, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ftfCantidadStock)))
                    .addGroup(jStockTabLayout.createSequentialGroup()
                        .addGroup(jStockTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btCrearStock, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btLimpiarStock, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jStockTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btEliminarStock, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btModificarStock))))
                .addGap(18, 18, 18)
                .addComponent(spStock, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(149, Short.MAX_VALUE))
        );
        jStockTabLayout.setVerticalGroup(
            jStockTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jStockTabLayout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(jStockTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSucursalStock)
                    .addComponent(cbSucursalStock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jStockTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblProductoStock)
                    .addComponent(cbProductoStock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jStockTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCantidadStock)
                    .addComponent(ftfCantidadStock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(46, 46, 46)
                .addGroup(jStockTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btCrearStock)
                    .addComponent(btModificarStock))
                .addGap(18, 18, 18)
                .addGroup(jStockTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btEliminarStock)
                    .addComponent(btLimpiarStock))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jStockTabLayout.createSequentialGroup()
                .addComponent(spStock, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 60, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Stock", jStockTab);

        jProvisionTab.setFont(new java.awt.Font("Noto Sans", 0, 12)); // NOI18N
        jProvisionTab.setMaximumSize(new java.awt.Dimension(704, 430));
        jProvisionTab.setMinimumSize(new java.awt.Dimension(704, 430));
        jProvisionTab.setPreferredSize(new java.awt.Dimension(704, 430));

        lblSucursalProvision.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        lblSucursalProvision.setText("Sucursal Destino:");

        lblProductoProvision.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        lblProductoProvision.setText("Producto:");

        lblCantidadProvision.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        lblCantidadProvision.setText("Cantidad:");

        btAgregarProductoProvision.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        btAgregarProductoProvision.setText("Agregar Producto");
        btAgregarProductoProvision.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAgregarProductoProvisionActionPerformed(evt);
            }
        });

        btEliminarProductoProvision.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        btEliminarProductoProvision.setText("Eliminar Producto");
        btEliminarProductoProvision.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEliminarProductoProvisionActionPerformed(evt);
            }
        });

        spProvision.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        spProvision.setPreferredSize(new java.awt.Dimension(600, 400));

        getTableProvision();
        spProvision.setViewportView(tlProvision);

        btCrearProvision.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        btCrearProvision.setText("Crear Orden");
        btCrearProvision.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCrearProvisionActionPerformed(evt);
            }
        });

        cbSucursalProvision.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        cbSucursalProvision.setToolTipText("");
        sucursales.forEach(s -> {
            cbSucursalProvision.addItem(s);
        });
        cbSucursalProvision.setSelectedIndex(-1);

        cbProductoProvision.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        cbProductoProvision.setToolTipText("");
        productos.forEach(s -> {
            cbProductoProvision.addItem(s);
        });
        cbProductoProvision.setSelectedIndex(-1);

        lblFechaProvision.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        lblFechaProvision.setText("Fecha de orden:");

        btLimpiarProvision.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        btLimpiarProvision.setText("Limpiar");
        btLimpiarProvision.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLimpiarProvisionActionPerformed(evt);
            }
        });

        ftfCantidadProvision.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        ftfCantidadProvision.setText("0");
        ftfCantidadProvision.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N

        lblFechaOrdenProvision.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        lblFechaOrdenProvision.setText(LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE));


        javax.swing.GroupLayout jProvisionTabLayout = new javax.swing.GroupLayout(jProvisionTab);
        jProvisionTab.setLayout(jProvisionTabLayout);
        jProvisionTabLayout.setHorizontalGroup(
            jProvisionTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jProvisionTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jProvisionTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jProvisionTabLayout.createSequentialGroup()
                        .addGroup(jProvisionTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblSucursalProvision)
                            .addComponent(lblProductoProvision)
                            .addComponent(lblFechaProvision)
                            .addComponent(lblCantidadProvision))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jProvisionTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cbSucursalProvision, 0, 107, Short.MAX_VALUE)
                            .addComponent(cbProductoProvision, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ftfCantidadProvision)
                            .addComponent(lblFechaOrdenProvision, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jProvisionTabLayout.createSequentialGroup()
                        .addGroup(jProvisionTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btCrearProvision, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btEliminarProductoProvision, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btAgregarProductoProvision, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btLimpiarProvision, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(spProvision, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(141, Short.MAX_VALUE))
        );
        jProvisionTabLayout.setVerticalGroup(
            jProvisionTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jProvisionTabLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jProvisionTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFechaProvision)
                    .addComponent(lblFechaOrdenProvision))
                .addGap(15, 15, 15)
                .addGroup(jProvisionTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSucursalProvision)
                    .addComponent(cbSucursalProvision, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jProvisionTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblProductoProvision)
                    .addComponent(cbProductoProvision, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jProvisionTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCantidadProvision)
                    .addComponent(ftfCantidadProvision, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45)
                .addGroup(jProvisionTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btAgregarProductoProvision)
                    .addComponent(btLimpiarProvision))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btEliminarProductoProvision)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btCrearProvision)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jProvisionTabLayout.createSequentialGroup()
                .addComponent(spProvision, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 60, Short.MAX_VALUE))
        );

        lblFechaOrdenProvision.getAccessibleContext().setAccessibleName("");

        jTabbedPane1.addTab("Provision", jProvisionTab);

        jCaminos.setFont(new java.awt.Font("Noto Sans", 0, 12)); // NOI18N
        jCaminos.setMaximumSize(new java.awt.Dimension(704, 430));
        jCaminos.setMinimumSize(new java.awt.Dimension(704, 430));

        spCaminos.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        tlCaminos.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        tlCaminos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Fecha", "S. Destino", "Tiempo Max.", "Productos"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tlCaminos.setShowGrid(true);
        tlCaminos.getTableHeader().setReorderingAllowed(false);
        spCaminos.setViewportView(tlCaminos);

        btVerCaminos.setFont(new java.awt.Font("Noto Sans", 0, 13)); // NOI18N
        btVerCaminos.setText("Ver Caminos");

        javax.swing.GroupLayout jCaminosLayout = new javax.swing.GroupLayout(jCaminos);
        jCaminos.setLayout(jCaminosLayout);
        jCaminosLayout.setHorizontalGroup(
            jCaminosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jCaminosLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(btVerCaminos)
                .addGap(18, 18, 18)
                .addComponent(spCaminos, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(254, Short.MAX_VALUE))
        );
        jCaminosLayout.setVerticalGroup(
            jCaminosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jCaminosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jCaminosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btVerCaminos)
                    .addComponent(spCaminos, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(224, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Caminos", jCaminos);

        jFlujoMax.setFont(new java.awt.Font("Noto Sans", 0, 12)); // NOI18N
        jFlujoMax.setMaximumSize(new java.awt.Dimension(704, 430));
        jFlujoMax.setMinimumSize(new java.awt.Dimension(704, 430));
        jFlujoMax.setName(""); // NOI18N
        jFlujoMax.setPreferredSize(new java.awt.Dimension(704, 430));

        javax.swing.GroupLayout jFlujoMaxLayout = new javax.swing.GroupLayout(jFlujoMax);
        jFlujoMax.setLayout(jFlujoMaxLayout);
        jFlujoMaxLayout.setHorizontalGroup(
            jFlujoMaxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 704, Short.MAX_VALUE)
        );
        jFlujoMaxLayout.setVerticalGroup(
            jFlujoMaxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 430, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Flujo Max.", jFlujoMax);

        jPageRank.setFont(new java.awt.Font("Noto Sans", 0, 12)); // NOI18N
        jPageRank.setMaximumSize(new java.awt.Dimension(704, 430));
        jPageRank.setMinimumSize(new java.awt.Dimension(704, 430));
        jPageRank.setName(""); // NOI18N
        jPageRank.setPreferredSize(new java.awt.Dimension(704, 430));

        javax.swing.GroupLayout jPageRankLayout = new javax.swing.GroupLayout(jPageRank);
        jPageRank.setLayout(jPageRankLayout);
        jPageRankLayout.setHorizontalGroup(
            jPageRankLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 704, Short.MAX_VALUE)
        );
        jPageRankLayout.setVerticalGroup(
            jPageRankLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 430, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Page Rank", jPageRank);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>                        
    
    /**
     * Sucursal CRUD Eventos y Auxiliares
     */
    private void btCrearSucursalActionPerformed(java.awt.event.ActionEvent evt) {                                                
        try {
            SucursalDTO dto = SucursalForm.validarSucursal(tfNombreSucursal.getText(),
                    ftfHoraApertura.getText(),
                    ftfHoraCierre.getText(), cbEstadoSucursal.isSelected());
            sucursalController.addSucursal(dto);
            javax.swing.JOptionPane.showMessageDialog(null, "Sucursal creada con éxito", "ÉXITO",
                    JOptionPane.INFORMATION_MESSAGE);
            updateSucursalTable();
        } catch (IllegalArgumentException e) {
            javax.swing.JOptionPane.showMessageDialog(null, e.getMessage(), "ERROR",
                    JOptionPane.ERROR_MESSAGE);
        }
    }                                               

    private void btBuscarSucursalActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        if(!ftfIDSucursal.getText().isBlank()){
            List<SucursalDTO> aux = new ArrayList<SucursalDTO>();
            aux.add(sucursalController.getSucursalById(Integer.parseInt(ftfIDSucursal.getText())));
            getTableSucursal(aux);
            return;
        }
        if (!tfNombreSucursal.getText().isBlank()){
            getTableSucursal(sucursalController.getSucursalesByName(tfNombreSucursal.getText()));
            return;
        }
        if (!ftfHoraApertura.getText().isBlank() && !ftfHoraApertura.getText().equals("00:00")){
            getTableSucursal(sucursalController.getSucursalesByHorarioApertura(LocalTime.parse(ftfHoraApertura.getText())));
            return;
        }
        if (!ftfHoraCierre.getText().isBlank() && !ftfHoraCierre.getText().equals("00:00")){
            getTableSucursal(sucursalController.getSucursalesByHorarioCierre(LocalTime.parse(ftfHoraCierre.getText())));
            return;
        }
        if (cbEstadoSucursal.isSelected()){
            getTableSucursal(sucursalController.getSucursalesByEstado(cbEstadoSucursal.isSelected()));
            return;
        }
        
        getTableSucursal(sucursales);
    }        

    private void btModificarSucursalActionPerformed(java.awt.event.ActionEvent evt) {
        if (tlSucursal.getSelectionModel().isSelectionEmpty()){
            javax.swing.JOptionPane.showMessageDialog(null, "Debe seleccionar una sucursal de la tabla para continuar.", "ERROR",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        try {
            SucursalDTO dto = SucursalForm.validarSucursal(tfNombreSucursal.getText(), ftfHoraApertura.getText(), ftfHoraCierre.getText(), cbEstadoSucursal.isSelected());
            dto.setId(Integer.parseInt(ftfIDSucursal.getText()));
            sucursalController.updateSucursal(dto);
            javax.swing.JOptionPane.showMessageDialog(null, "Sucursal modificada con éxito", "ÉXITO",
                    JOptionPane.INFORMATION_MESSAGE);
            updateSucursalTable();
        } catch (IllegalArgumentException e) {
            javax.swing.JOptionPane.showMessageDialog(null, e.getMessage(), "ERROR",
                    JOptionPane.ERROR_MESSAGE);
        }
    }                                                   

    private void btEliminarSucursalActionPerformed(java.awt.event.ActionEvent evt) {
        if (tlSucursal.getSelectionModel().isSelectionEmpty()){
            javax.swing.JOptionPane.showMessageDialog(null, "Debe seleccionar una sucursal de la tabla para continuar.", "ERROR",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        try {
            int id = Integer.parseInt(tlSucursal.getValueAt(tlSucursal.getSelectedRow(), 0).toString());
            SucursalDTO dto = sucursales
                .stream()
                .filter(s -> s.getId().equals(id))
                .findFirst().get();
            sucursalController.deleteSucursal(dto);
            javax.swing.JOptionPane.showMessageDialog(null, "Sucursal eliminada con éxito", "ÉXITO",
                    JOptionPane.INFORMATION_MESSAGE);
            updateSucursalTable();
        } catch (IllegalArgumentException e) {
            javax.swing.JOptionPane.showMessageDialog(null, e.getMessage(), "ERROR",
                    JOptionPane.ERROR_MESSAGE);
        }
    }                                                  

    private void btLimpiarSucursalActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        ftfIDSucursal.setText("");
        tfNombreSucursal.setText("");
        ftfHoraApertura.setText("00:00");
        ftfHoraCierre.setText("00:00");
        cbEstadoSucursal.setSelected(false);
        updateSucursalTable();
    }                                                 

    private void getTableSucursal(List<SucursalDTO> listaDTO) {

        DefaultTableModel modelo = new DefaultTableModel() {
            @Override
            public Class<?> getColumnClass(int columnIndex) {
                return String.class; 
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        };

        String[] columnas = {"ID", "Nombre", "Apertura", "Cierre", "Operativa"};
        String[] data = new String[columnas.length];
        for (int i = 0; i < columnas.length; i++) {
            modelo.addColumn(columnas[i]);
        }

        if (!(listaDTO == null)) {
            try {
                for (SucursalDTO dto : listaDTO) {
                    data[0] = dto.getId().toString();
                    data[1] = dto.getNombre();
                    data[2] = dto.getHoraApertura().toString();
                    data[3] = dto.getHoraCierre().toString();
                    data[4] = dto.getEstado() ? "Si" : "No";
                    modelo.addRow(data);
                }

            } catch (NullPointerException e) {
                System.out.println(e.getMessage());
            }
        }

        tlSucursal.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tlSucursal.setModel(modelo);
        tlSucursal.setFont(new java.awt.Font("Noto Sans", 0, 13));
        tlSucursal.setShowGrid(true);
        tlSucursal.getTableHeader().setReorderingAllowed(false);
        tlSucursal.getTableHeader().setResizingAllowed(true);
        tlSucursal.setAutoCreateRowSorter(true);
        tlSucursal.setFillsViewportHeight(true);

        int i = tlSucursal.getColumnModel().getColumnCount() - 1;

        while (i >= 0) {
            tlSucursal.getColumnModel().getColumn(i).setResizable(true);
            i--;
        }

        tlSucursal.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
        public void valueChanged(ListSelectionEvent event) {
            if (tlSucursal.getSelectionModel().isSelectionEmpty())
            return;
        
            int row = tlSucursal.getSelectedRow();
            ftfIDSucursal.setText(tlSucursal.getValueAt(row, 0).toString());
            tfNombreSucursal.setText(tlSucursal.getValueAt(row, 1).toString());
            ftfHoraApertura.setText(tlSucursal.getValueAt(row, 2).toString());
            ftfHoraCierre.setText(tlSucursal.getValueAt(row, 3).toString());
            cbEstadoSucursal.setSelected(tlSucursal.getValueAt(row, 4).toString().equalsIgnoreCase("Si"));
        }});
    }

    private void updateSucursalTable() {
        tlSucursal.getSelectionModel().clearSelection();
        sucursales = sucursalController.getAllSucursales();
        getTableSucursal(sucursales);
    }

    /**
    * Ruta CRUD Eventos y Auxiliares
    */
    private void btCrearRutaActionPerformed(java.awt.event.ActionEvent evt) {
        if (cbSucursalOrigen.getSelectedIndex() == -1 || cbSucursalDestino.getSelectedIndex() == -1){
            javax.swing.JOptionPane.showMessageDialog(null, "Debe seleccionar una sucursal de origen y destino.", "ERROR",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            SucursalDTO dtoOrigen = (SucursalDTO) cbSucursalOrigen.getSelectedItem();
            SucursalDTO dtoDestino = (SucursalDTO) cbSucursalDestino.getSelectedItem();
            RutaDTO dto = RutaForm.validarRuta(ftfCapMaxima.getText(), dtoOrigen, dtoDestino, ftfTiempoTransito.getText(), cbEstadoRuta.isSelected());
            rutaController.addRuta(dto);
            javax.swing.JOptionPane.showMessageDialog(null, "Ruta creada con éxito", "ÉXITO",
                    JOptionPane.INFORMATION_MESSAGE);
            updateSucursalTable();
        } catch (IllegalArgumentException e) {
            javax.swing.JOptionPane.showMessageDialog(null, e.getMessage(), "ERROR",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    private void btBuscarRutaActionPerformed(java.awt.event.ActionEvent evt) {
        if(!ftfIDRuta.getText().isBlank()){
            List<RutaDTO> aux = new ArrayList<RutaDTO>();
            aux.add(rutaController.getRutaById(Integer.parseInt(ftfIDRuta.getText())));
            getTableRuta(aux);
            return;
        }
        if (cbSucursalOrigen.getSelectedIndex() != -1){
            getTableRuta(rutaController.getRutasBySucursalOrigen((SucursalDTO) cbSucursalOrigen.getSelectedItem()));
            return;
        }

        if(!ftfTiempoTransito.getText().isBlank() && !ftfTiempoTransito.getText().equals("00:00")){
            String[] partes = ftfTiempoTransito.getText().split(":");
            int horas = Integer.parseInt(partes[0]);
            int minutos = Integer.parseInt(partes[1]);
            Duration.ofHours(horas).plusMinutes(minutos);

            getTableRuta(rutaController.getRutasByDuracionViaje(Duration.ofHours(horas).plusMinutes(minutos)));
            return;
        }

        if (!ftfCapMaxima.getText().isBlank() && !ftfCapMaxima.getText().equals("0")){
            getTableRuta(rutaController.getRutasByCapacidadEnKilos(Double.parseDouble(ftfCapMaxima.getText())));
            return;
        }

        if (cbEstadoRuta.isSelected()){
            getTableRuta(rutaController.getRutasByEstado(cbEstadoRuta.isSelected()));
            return;
        }

        getTableRuta(rutas);
    }

    private void btModificarRutaActionPerformed(java.awt.event.ActionEvent evt) {
        if (tlRuta.getSelectionModel().isSelectionEmpty()){
            javax.swing.JOptionPane.showMessageDialog(null, "Debe seleccionar una ruta de la tabla para continuar.", "ERROR",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            RutaDTO dto = RutaForm.validarRuta(ftfCapMaxima.getText(), (SucursalDTO) cbSucursalOrigen.getSelectedItem(),
                    (SucursalDTO) cbSucursalDestino.getSelectedItem(), ftfTiempoTransito.getText(), cbEstadoRuta.isSelected());
            dto.setId(Integer.parseInt(ftfIDRuta.getText()));
            rutaController.updateRuta(dto);
            javax.swing.JOptionPane.showMessageDialog(null, "Ruta modificada con éxito", "ÉXITO",
                    JOptionPane.INFORMATION_MESSAGE);
            updateRutaTable();
        } catch (IllegalArgumentException e) {
            javax.swing.JOptionPane.showMessageDialog(null, e.getMessage(), "ERROR",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    private void btEliminarRutaActionPerformed(java.awt.event.ActionEvent evt) {
        if (tlRuta.getSelectionModel().isSelectionEmpty()){
            javax.swing.JOptionPane.showMessageDialog(null, "Debe seleccionar una ruta de la tabla para continuar.", "ERROR",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            int id = Integer.parseInt(tlRuta.getValueAt(tlRuta.getSelectedRow(), 0).toString());
            RutaDTO dto = rutas
                    .stream()
                    .filter(r -> r.getId().equals(id))
                    .findFirst()
                    .orElseThrow();
            rutaController.deleteRuta(dto);
            javax.swing.JOptionPane.showMessageDialog(null, "Ruta eliminada con éxito", "ÉXITO",
                    JOptionPane.INFORMATION_MESSAGE);
            updateRutaTable();
        } catch (IllegalArgumentException e) {
            javax.swing.JOptionPane.showMessageDialog(null, e.getMessage(), "ERROR",
                    JOptionPane.ERROR_MESSAGE);
        }
    }                                              

    private void btLimpiarRutaActionPerformed(java.awt.event.ActionEvent evt) {
        ftfIDRuta.setText("");
        ftfTiempoTransito.setText("00:00");
        ftfCapMaxima.setText("0");
        cbEstadoRuta.setSelected(false);
        cbSucursalOrigen.removeAllItems();
        cbSucursalDestino.removeAllItems();
        sucursales.forEach(s -> {
            cbSucursalOrigen.addItem(s);
            cbSucursalDestino.addItem(s);
        });
        cbSucursalOrigen.setSelectedIndex(-1);
        cbSucursalDestino.setSelectedIndex(-1);
        updateRutaTable();
    }

    private void getTableRuta(List<RutaDTO> listaDTO) {

        DefaultTableModel modelo = new DefaultTableModel() {
            @Override
            public Class<?> getColumnClass(int columnIndex) {
                return String.class;
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        };

        String[] columnas = {"ID", "S. Origen", "S. Destino", "Tiempo", "Cap. Maxima", "Operativa"};
        String[] data = new String[columnas.length];
        for (int i = 0; i < columnas.length; i++) {
            modelo.addColumn(columnas[i]);
        }

        if (!(listaDTO == null)) {
            try {
                for (RutaDTO dto : listaDTO) {
                    data[0] = dto.getId().toString();
                    data[1] = dto.getSucursalOrigen().getNombre();
                    data[2] = dto.getSucursalDestino().getNombre();
                    data[3] = dto.formatDuration();
                    data[4] = dto.getCapacidadEnKilos().toString();
                    data[5] = dto.getEstado() ? "Si" : "No";
                    modelo.addRow(data);
                }

            } catch (NullPointerException e) {
                System.out.println(e.getMessage());
            }
        }

        tlRuta.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tlRuta.setModel(modelo);
        tlRuta.setFont(new java.awt.Font("Noto Sans", 0, 13));
        tlRuta.setShowGrid(true);
        tlRuta.getTableHeader().setReorderingAllowed(false);
        tlRuta.getTableHeader().setResizingAllowed(true);
        tlRuta.setAutoCreateRowSorter(true);
        tlRuta.setFillsViewportHeight(true);

        int i = tlRuta.getColumnModel().getColumnCount() - 1;

        while (i >= 0) {
            tlRuta.getColumnModel().getColumn(i).setResizable(true);
            i--;
        }

        tlRuta.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
            public void valueChanged(ListSelectionEvent event) {
                if (tlRuta.getSelectionModel().isSelectionEmpty())
                    return;

                int row = tlRuta.getSelectedRow();
                ftfIDRuta.setText(tlRuta.getValueAt(row, 0).toString());
                cbSucursalOrigen.setSelectedItem(
                        sucursales
                                .stream()
                                .filter(s -> s.getNombre().equals(tlRuta.getValueAt(row, 1)))
                                .findFirst()
                                .orElseThrow(null));
                cbSucursalDestino.setSelectedItem(
                        sucursales
                                .stream()
                                .filter(s -> s.getNombre().equals(tlRuta.getValueAt(row, 2)))
                                .findFirst()
                                .orElseThrow(null));
                ftfTiempoTransito.setText(tlRuta.getValueAt(row, 3).toString());
                ftfCapMaxima.setText(tlRuta.getValueAt(row, 4).toString());
                cbEstadoRuta.setSelected(tlRuta.getValueAt(row, 5).toString().equalsIgnoreCase("Si"));
            }});
    }

    private void updateRutaTable() {
        tlRuta.getSelectionModel().clearSelection();
        rutas = rutaController.getAllRutas();
        getTableRuta(rutas);
    }

    /**
    * Producto CRUD Eventos y Auxiliares
    */
    private void btCrearProductoActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            ProductoDTO dto = ProductoForm.validarProducto(tfNombreProducto.getText(), tfDescripcionProducto.getText(),
                    ftfPrecioUnitario.getText(), ftfPesoKG.getText());
            productoController.addProducto(dto);
            javax.swing.JOptionPane.showMessageDialog(null, "Producto creado con éxito", "ÉXITO",
                    JOptionPane.INFORMATION_MESSAGE);
            updateProductoTable();
        } catch (IllegalArgumentException e) {
            javax.swing.JOptionPane.showMessageDialog(null, e.getMessage(), "ERROR",
                    JOptionPane.ERROR_MESSAGE);
        }
    }                                               

    private void btBuscarProductoActionPerformed(java.awt.event.ActionEvent evt) {
        if(!ftfIDProducto.getText().isBlank()){
            List<ProductoDTO> aux = new ArrayList<ProductoDTO>();
            aux.add(productoController.getProductoById(Integer.parseInt(ftfIDProducto.getText())));
            getTableProducto(aux);
            return;
        }
        if (!tfNombreProducto.getText().isBlank()){
            getTableProducto(productoController.getProductosByName(tfNombreProducto.getText()));
            return;
        }

        if (!tfDescripcionProducto.getText().isBlank()){
            getTableProducto(productoController.getProductosByDescripcion(tfDescripcionProducto.getText()));
            return;
        }

        if(!ftfPrecioUnitario.getText().isBlank() && !ftfPrecioUnitario.getText().equals("0")){
            getTableProducto(productoController.getProductosByPrecio(Double.parseDouble(ftfPrecioUnitario.getText())));
            return;
        }

        if(!ftfPesoKG.getText().isBlank() && !ftfPesoKG.getText().equals("0")){
            getTableProducto(productoController.getProductosByPrecio(Double.parseDouble(ftfPesoKG.getText())));
            return;
        }

        getTableProducto(productos);
    }                                                

    private void btModificarProductoActionPerformed(java.awt.event.ActionEvent evt) {
        if (tlProducto.getSelectionModel().isSelectionEmpty()){
            javax.swing.JOptionPane.showMessageDialog(null, "Debe seleccionar un producto de la tabla para continuar.", "ERROR",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            ProductoDTO dto = ProductoForm.validarProducto(tfNombreProducto.getText(), tfDescripcionProducto.getText(),
                    ftfPrecioUnitario.getText(), ftfPesoKG.getText());
            dto.setId(Integer.parseInt(ftfIDProducto.getText()));
            productoController.updateProducto(dto);
            javax.swing.JOptionPane.showMessageDialog(null, "Producto modificado con éxito", "ÉXITO",
                    JOptionPane.INFORMATION_MESSAGE);
            updateProductoTable();
        } catch (IllegalArgumentException e) {
            javax.swing.JOptionPane.showMessageDialog(null, e.getMessage(), "ERROR",
                    JOptionPane.ERROR_MESSAGE);
        }
    }                                                   

    private void btEliminarProductoActionPerformed(java.awt.event.ActionEvent evt) {
        if (tlProducto.getSelectionModel().isSelectionEmpty()){
            javax.swing.JOptionPane.showMessageDialog(null, "Debe seleccionar un producto de la tabla para continuar.", "ERROR",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            int id = Integer.parseInt(tlProducto.getValueAt(tlProducto.getSelectedRow(), 0).toString());
            ProductoDTO dto = productos
                    .stream()
                    .filter(p -> p.getId().equals(id))
                    .findFirst().get();
            productoController.deleteProducto(dto);
            javax.swing.JOptionPane.showMessageDialog(null, "Producto eliminado con éxito", "ÉXITO",
                    JOptionPane.INFORMATION_MESSAGE);
            updateProductoTable();
        } catch (IllegalArgumentException e) {
            javax.swing.JOptionPane.showMessageDialog(null, e.getMessage(), "ERROR",
                    JOptionPane.ERROR_MESSAGE);
        }
    }                                                  

    private void btLimpiarProductoActionPerformed(java.awt.event.ActionEvent evt) {
        ftfIDProducto.setText("");
        tfNombreProducto.setText("");
        tfDescripcionProducto.setText("");
        ftfPrecioUnitario.setText("0");
        ftfPesoKG.setText("0");
        updateProductoTable();
    }

    private void getTableProducto(List<ProductoDTO> listaDTO) {
        DefaultTableModel modelo = new DefaultTableModel() {
            @Override
            public Class<?> getColumnClass(int columnIndex) {
                return String.class;
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        };

        String[] columnas = {"ID", "Nombre", "Descripcion", "Precio_Unitario", "Peso_KG"};
        String[] data = new String[columnas.length];
        for (int i = 0; i < columnas.length; i++) {
            modelo.addColumn(columnas[i]);
        }

        if (!(listaDTO == null)) {
            try {
                for (ProductoDTO dto : listaDTO) {
                    data[0] = dto.getId().toString();
                    data[1] = dto.getNombre();
                    data[2] = dto.getDescripcion();
                    data[3] = dto.getPrecio().toString();
                    data[4] = dto.getPeso().toString();
                    modelo.addRow(data);
                }

            } catch (NullPointerException e) {
                System.out.println(e.getMessage());
            }
        }

        tlProducto.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tlProducto.setModel(modelo);
        tlProducto.setFont(new java.awt.Font("Noto Sans", 0, 13));
        tlProducto.setShowGrid(true);
        tlProducto.getTableHeader().setReorderingAllowed(false);
        tlProducto.getTableHeader().setResizingAllowed(true);
        tlProducto.setAutoCreateRowSorter(true);
        tlProducto.setFillsViewportHeight(true);

        int i = tlProducto.getColumnModel().getColumnCount() - 1;

        while (i >= 0) {
            tlProducto.getColumnModel().getColumn(i).setResizable(true);
            i--;
        }

        tlProducto.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
            public void valueChanged(ListSelectionEvent event) {
                if (tlProducto.getSelectionModel().isSelectionEmpty())
                    return;

                int row = tlProducto.getSelectedRow();
                ftfIDProducto.setText(tlProducto.getValueAt(row, 0).toString());
                tfNombreProducto.setText(tlProducto.getValueAt(row, 1).toString());
                tfDescripcionProducto.setText(tlProducto.getValueAt(row, 2).toString());
                ftfPrecioUnitario.setText(tlProducto.getValueAt(row, 3).toString());
                ftfPesoKG.setText(tlProducto.getValueAt(row, 4).toString());
            }});
    }

    private void updateProductoTable() {
        tlProducto.getSelectionModel().clearSelection();
        productos = productoController.getAllProductos();
        getTableProducto(productos);
    }
    
    /**
    * Stock de Producto CRUD Eventos y Auxiliares
    */
    private void cbSucursalStockActionPerformed(java.awt.event.ActionEvent evt) {                                                
       if(cbSucursalStock.getSelectedIndex() != -1)
           updateProductoStockTable((SucursalDTO) cbSucursalStock.getSelectedItem());
    }                                               

    private void cbProductoStockActionPerformed(java.awt.event.ActionEvent evt) {
        ProductoDTO k = ((ProductoDTO) cbProductoStock.getSelectedItem());
        if (productoStockSucursal.containsKey(k))
            ftfCantidadStock.setText(productoStockSucursal.get(k).toString());
    }                                               

    private void btCrearStockActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            SucursalDTO sucursalDTO = (SucursalDTO) cbSucursalStock.getSelectedItem();
            ProductoDTO productoDTO = (ProductoDTO) cbProductoStock.getSelectedItem();
            sucursalController.setStockProducto(sucursalDTO, productoDTO, Integer.parseInt(ftfCantidadStock.getText()));
            sucursalDTO.getListaProductoCantidadEnStock().put(productoDTO, Integer.parseInt(ftfCantidadStock.getText()));
            javax.swing.JOptionPane.showMessageDialog(null, "Stock de Producto creado con éxito", "ÉXITO",
                    JOptionPane.INFORMATION_MESSAGE);
            updateProductoStockTable(sucursalDTO);
        } catch (IllegalArgumentException e) {
            javax.swing.JOptionPane.showMessageDialog(null, e.getMessage(), "ERROR",
                    JOptionPane.ERROR_MESSAGE);
        }
    }                                            

    private void btModificarStockActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            SucursalDTO sucursalDTO = (SucursalDTO) cbSucursalStock.getSelectedItem();
            ProductoDTO productoDTO = (ProductoDTO) cbProductoStock.getSelectedItem();
            sucursalController.setStockProducto(sucursalDTO, productoDTO, Integer.parseInt(ftfCantidadStock.getText()));
            sucursalDTO.getListaProductoCantidadEnStock().put(productoDTO, Integer.parseInt(ftfCantidadStock.getText()));
            javax.swing.JOptionPane.showMessageDialog(null, "Stock de Producto modificado con éxito", "ÉXITO",
                    JOptionPane.INFORMATION_MESSAGE);
            updateProductoStockTable(sucursalDTO);
        } catch (IllegalArgumentException e) {
            javax.swing.JOptionPane.showMessageDialog(null, e.getMessage(), "ERROR",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    private void btLimpiarStockActionPerformed(java.awt.event.ActionEvent evt) {
        sucursales = sucursalController.getAllSucursales();
        cbSucursalStock.removeAllItems();
        sucursales.forEach(s -> {
            cbSucursalStock.addItem(s);
        });
        cbSucursalStock.setSelectedIndex(-1);
        productos = productoController.getAllProductos();
        cbProductoStock.removeAllItems();
        productos.forEach(s -> {
            cbProductoStock.addItem(s);
        });
        cbProductoStock.setSelectedIndex(-1);
        ftfCantidadStock.setText("0");
        getTableStockSucursal(null);
    }                                              

    private void btEliminarStockActionPerformed(java.awt.event.ActionEvent evt) {
        if (tlStockSucursal.getSelectionModel().isSelectionEmpty()){
            javax.swing.JOptionPane.showMessageDialog(null, "Debe seleccionar un producto de la tabla para continuar.", "ERROR",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            SucursalDTO sucursalDTO = (SucursalDTO) cbSucursalStock.getSelectedItem();
            ProductoDTO productoDTO = (ProductoDTO) cbProductoStock.getSelectedItem();
            sucursalController.setStockProducto(sucursalDTO, productoDTO, 0);
            sucursalDTO.getListaProductoCantidadEnStock().put(productoDTO, 0);
            javax.swing.JOptionPane.showMessageDialog(null, "Stock vaciado con éxito", "ÉXITO",
                    JOptionPane.INFORMATION_MESSAGE);
            updateProductoStockTable(sucursalDTO);
        } catch (IllegalArgumentException e) {
            javax.swing.JOptionPane.showMessageDialog(null, e.getMessage(), "ERROR",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    private void getTableStockSucursal(Map<ProductoDTO, Integer> listaDTO) {
        DefaultTableModel modelo = new DefaultTableModel() {
            @Override
            public Class<?> getColumnClass(int columnIndex) {
                return String.class;
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        };

        String[] columnas = {"ID Producto", "Producto", "Cantidad"};
        String[] data = new String[columnas.length];
        for (int i = 0; i < columnas.length; i++) {
            modelo.addColumn(columnas[i]);
        }

        if (!(listaDTO == null)) {
            try {
                for (ProductoDTO dto : listaDTO.keySet()) {
                    if(listaDTO.get(dto) > 0) {
                        data[0] = dto.getId().toString();
                        data[1] = dto.getNombre();
                        data[2] = listaDTO.get(dto).toString();
                        modelo.addRow(data);
                    }
                }

            } catch (NullPointerException e) {
                System.out.println(e.getMessage());
            }
        }

        tlStockSucursal.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tlStockSucursal.setModel(modelo);
        tlStockSucursal.setFont(new java.awt.Font("Noto Sans", 0, 13));
        tlStockSucursal.setShowGrid(true);
        tlStockSucursal.getTableHeader().setReorderingAllowed(false);
        tlStockSucursal.getTableHeader().setResizingAllowed(true);
        tlStockSucursal.setAutoCreateRowSorter(true);
        tlStockSucursal.setFillsViewportHeight(true);

        int i = tlStockSucursal.getColumnModel().getColumnCount() - 1;

        while (i >= 0) {
            tlStockSucursal.getColumnModel().getColumn(i).setResizable(true);
            i--;
        }

        tlStockSucursal.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
            public void valueChanged(ListSelectionEvent event) {
                if (tlStockSucursal.getSelectionModel().isSelectionEmpty())
                    return;

                int row = tlStockSucursal.getSelectedRow();
                cbProductoStock.setSelectedItem(
                        productos
                        .stream()
                        .filter(p -> p.getId() == Integer.parseInt(tlStockSucursal.getValueAt(row, 0).toString()))
                        .findFirst()
                        .orElseThrow(null));
                ftfCantidadStock.setText(tlStockSucursal.getValueAt(row, 2).toString());
            }});
    }

    private void updateProductoStockTable(SucursalDTO dto) {
        tlStockSucursal.getSelectionModel().clearSelection();
        productoStockSucursal = sucursalController.getStockProductos(dto);
        getTableStockSucursal(productoStockSucursal);
    }

    /**
     * Orden Provision CRUD Eventos y Auxiliares
     */
    private void btAgregarProductoProvisionActionPerformed(java.awt.event.ActionEvent evt) {
        if (cbSucursalProvision.getSelectedIndex() == -1 || cbProductoProvision.getSelectedIndex() == -1) {
        javax.swing.JOptionPane.showMessageDialog(null, "Debe seleccionar una sucursal y un producto para continuar.", "ERROR",
                JOptionPane.ERROR_MESSAGE);
        return;
        }
        if (Integer.parseInt(ftfCantidadProvision.getText()) <= 0){
            javax.swing.JOptionPane.showMessageDialog(null, "La cantidad debe ser positiva y mayor a 0.", "ERROR",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        updateProvisionTable((ProductoDTO) cbProductoProvision.getSelectedItem(), Integer.parseInt(ftfCantidadProvision.getText()), false);
    }                                                          

    private void btLimpiarProvisionActionPerformed(java.awt.event.ActionEvent evt) {
        sucursales = sucursalController.getAllSucursales();
        cbSucursalProvision.removeAllItems();
        sucursales.forEach(s -> {
            cbSucursalProvision.addItem(s);
        });
        cbSucursalProvision.setSelectedIndex(-1);
        productos = productoController.getAllProductos();
        cbProductoProvision.removeAllItems();
        productos.forEach(s -> {
            cbProductoProvision.addItem(s);
        });
        cbProductoProvision.setSelectedIndex(-1);
        ftfCantidadProvision.setText("0");
        ordenProvision = new HashMap<ProductoDTO, Integer>();
        getTableProvision();
    }

    private void btEliminarProductoProvisionActionPerformed(java.awt.event.ActionEvent evt) {
        if (tlProvision.getSelectionModel().isSelectionEmpty()){
            javax.swing.JOptionPane.showMessageDialog(null, "Debe seleccionar producto de la tabla para continuar.", "ERROR",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        updateProvisionTable((ProductoDTO) cbProductoProvision.getSelectedItem(), Integer.parseInt(ftfCantidadProvision.getText()), true);
    }

    private void btCrearProvisionActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void getTableProvision() {
        DefaultTableModel modelo = new DefaultTableModel() {
            @Override
            public Class<?> getColumnClass(int columnIndex) {
                return String.class;
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        };

        String[] columnas = {"ID Producto", "Producto", "Cantidad"};
        String[] data = new String[columnas.length];
        for (int i = 0; i < columnas.length; i++) {
            modelo.addColumn(columnas[i]);
        }

        tlProvision.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tlProvision.setModel(modelo);
        tlProvision.setFont(new java.awt.Font("Noto Sans", 0, 13));
        tlProvision.setShowGrid(true);
        tlProvision.getTableHeader().setReorderingAllowed(false);
        tlProvision.getTableHeader().setResizingAllowed(true);
        tlProvision.setAutoCreateRowSorter(true);
        tlProvision.setFillsViewportHeight(true);

        int i = tlProvision.getColumnModel().getColumnCount() - 1;

        while (i >= 0) {
            tlProvision.getColumnModel().getColumn(i).setResizable(true);
            i--;
        }

        if (!ordenProvision.isEmpty()) {
            try {
                for (ProductoDTO dto : ordenProvision.keySet()) {
                    data[0] = dto.getId().toString();
                    data[1] = dto.getNombre();
                    data[2] = ordenProvision.get(dto).toString();
                    modelo.addRow(data);
                }

            } catch (NullPointerException e) {
                System.out.println(e.getMessage());
            }
        }
    }

    private void updateProvisionTable(ProductoDTO dto, Integer cantidad, Boolean eliminar) {
        tlProvision.getSelectionModel().clearSelection();
        if (eliminar) ordenProvision.remove(dto);
        else ordenProvision.put(dto, cantidad);
        getTableProvision();
    }


    public static void main(String args[]) {
    try {
        UIManager.setLookAndFeel(new FlatIntelliJLaf());
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new PrincipalGUI().setVisible(true);
        });
    } catch (UnsupportedLookAndFeelException ex) {
        Logger.getLogger(PrincipalGUI.class.getName()).log(Level.SEVERE, null, ex);
    }
}
    

    // Variables declaration - do not modify                     
    private javax.swing.JButton btAgregarProductoProvision;
    private javax.swing.JButton btBuscarProducto;
    private javax.swing.JButton btBuscarRuta;
    private javax.swing.JButton btBuscarSucursal;
    private javax.swing.JButton btCrearProducto;
    private javax.swing.JButton btCrearProvision;
    private javax.swing.JButton btCrearRuta;
    private javax.swing.JButton btCrearStock;
    private javax.swing.JButton btCrearSucursal;
    private javax.swing.JButton btEliminarProducto;
    private javax.swing.JButton btEliminarProductoProvision;
    private javax.swing.JButton btEliminarRuta;
    private javax.swing.JButton btEliminarStock;
    private javax.swing.JButton btEliminarSucursal;
    private javax.swing.JButton btLimpiarProducto;
    private javax.swing.JButton btLimpiarProvision;
    private javax.swing.JButton btLimpiarRuta;
    private javax.swing.JButton btLimpiarStock;
    private javax.swing.JButton btLimpiarSucursal;
    private javax.swing.JButton btModificarProducto;
    private javax.swing.JButton btModificarRuta;
    private javax.swing.JButton btModificarStock;
    private javax.swing.JButton btModificarSucursal;
    private javax.swing.JButton btVerCaminos;
    private javax.swing.JCheckBox cbEstadoRuta;
    private javax.swing.JCheckBox cbEstadoSucursal;
    private JComboBox<ProductoDTO> cbProductoProvision;
    private JComboBox<ProductoDTO> cbProductoStock;
    private JComboBox<SucursalDTO> cbSucursalDestino;
    private JComboBox<SucursalDTO> cbSucursalOrigen;
    private JComboBox<SucursalDTO> cbSucursalProvision;
    private JComboBox<SucursalDTO> cbSucursalStock;
    private javax.swing.JFormattedTextField ftfCantidadProvision;
    private javax.swing.JFormattedTextField ftfCantidadStock;
    private javax.swing.JFormattedTextField ftfCapMaxima;
    private javax.swing.JFormattedTextField ftfHoraApertura;
    private javax.swing.JFormattedTextField ftfHoraCierre;
    private javax.swing.JFormattedTextField ftfIDProducto;
    private javax.swing.JFormattedTextField ftfIDRuta;
    private javax.swing.JFormattedTextField ftfIDSucursal;
    private javax.swing.JFormattedTextField ftfPesoKG;
    private javax.swing.JFormattedTextField ftfPrecioUnitario;
    private javax.swing.JFormattedTextField ftfTiempoTransito;
    private javax.swing.JPanel jCaminos;
    private javax.swing.JPanel jFlujoMax;
    private javax.swing.JPanel jPageRank;
    private javax.swing.JPanel jProductoTab;
    private javax.swing.JPanel jProvisionTab;
    private javax.swing.JPanel jRutaTab;
    private javax.swing.JPanel jStockTab;
    private javax.swing.JPanel jSucursalTab;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblCantidadProvision;
    private javax.swing.JLabel lblCantidadStock;
    private javax.swing.JLabel lblCapacidadMaxima;
    private javax.swing.JLabel lblDescripcionProducto;
    private javax.swing.JLabel lblEstadoRuta;
    private javax.swing.JLabel lblEstadoSucursal;
    private javax.swing.JLabel lblFechaOrdenProvision;
    private javax.swing.JLabel lblFechaProvision;
    private javax.swing.JLabel lblHoraAperturaSucursal;
    private javax.swing.JLabel lblHoraCierreSucursal;
    private javax.swing.JLabel lblIDProducto;
    private javax.swing.JLabel lblIDRuta;
    private javax.swing.JLabel lblIDSucursal;
    private javax.swing.JLabel lblNombreProducto;
    private javax.swing.JLabel lblNombreSucursal;
    private javax.swing.JLabel lblPesoKG;
    private javax.swing.JLabel lblPrecioUnitario;
    private javax.swing.JLabel lblProductoProvision;
    private javax.swing.JLabel lblProductoStock;
    private javax.swing.JLabel lblSucursalDestino;
    private javax.swing.JLabel lblSucursalOrigen;
    private javax.swing.JLabel lblSucursalProvision;
    private javax.swing.JLabel lblSucursalStock;
    private javax.swing.JLabel lblTiempoTransito;
    private javax.swing.JScrollPane spCaminos;
    private javax.swing.JScrollPane spProducto;
    private javax.swing.JScrollPane spProvision;
    private javax.swing.JScrollPane spRuta;
    private javax.swing.JScrollPane spStock;
    private javax.swing.JScrollPane spSucursal;
    private javax.swing.JTextField tfDescripcionProducto;
    private javax.swing.JTextField tfNombreProducto;
    private javax.swing.JTextField tfNombreSucursal;
    private javax.swing.JTable tlCaminos;
    private javax.swing.JTable tlProducto;
    private javax.swing.JTable tlProvision;
    private javax.swing.JTable tlRuta;
    private javax.swing.JTable tlStockSucursal;
    private javax.swing.JTable tlSucursal;
    // End of variables declaration                   

    private SucursalController sucursalController = new SucursalController(EntityManagerUtil.getEntityManager());
    private RutaController rutaController = new RutaController(EntityManagerUtil.getEntityManager());
    private ProductoController productoController = new ProductoController(EntityManagerUtil.getEntityManager());
    private OrdenProvisionController provisionController = new OrdenProvisionController(
            EntityManagerUtil.getEntityManager());
    private OrdenProvisionManager provisionManager = new OrdenProvisionManager(
            EntityManagerUtil.getEntityManager());

    private List<SucursalDTO> sucursales = sucursalController.getAllSucursales();
    private List<RutaDTO> rutas = rutaController.getAllRutas();
    private List<ProductoDTO> productos = productoController.getAllProductos();
    private Map<ProductoDTO, Integer> productoStockSucursal = new HashMap<ProductoDTO, Integer>();
    private Map<ProductoDTO, Integer> ordenProvision = new HashMap<ProductoDTO, Integer>();

}
